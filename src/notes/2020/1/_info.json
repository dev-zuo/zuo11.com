[
  {
    "source": "Element表格IE下由于滚动条原因导致错位问题.md",
    "staticFileName": "element_dolayout.html",
    "author": "guoqzuo",
    "createDate": "2020/01/07",
    "description": "Element 表头固定，表内容可滑动，在IE下滚动条会显示，有一定的宽度占位，导致表头与表内容由点错位，解决方法是：由于表单内容是从接口加载的，从接口加载完数据后，对el-talbe进行从新布局dolayout",
    "keywords": "Element表格IE下由于滚动条原因导致错位问题",
    "category": "Vue"
  },
  {
    "source": "IE下dialog弹窗的滚动条滚动到底部时，触发了浏览器滚动条.md",
    "staticFileName": "ie_dialog_scroll.html",
    "author": "guoqzuo",
    "createDate": "2020/01/07",
    "description": "Element dialog弹窗的滚动条滚动到底部时，触发了浏览器滚动条同样都是有遮罩层，chrome都是OK的，但IE下会有问题。经过定位后发现，对于dialog使用了append-to-body属性的，都没问题。发现dialog显示时body上添加了一个 el-popup-parent--hidden的class, 设置了overflow为hidden，关了滚动条。对于没有append-to-body属性的dialog如果想修复有两种办法",
    "keywords": "IE下dialog弹窗的滚动条滚动到底部时，触发了浏览器滚动条",
    "category": "Vue"
  },
  {
    "source": "怎么判断当前鼠标是否在某个div内部.md",
    "staticFileName": "contains.html",
    "author": "guoqzuo",
    "createDate": "2020/01/07",
    "description": "当监听到事件，事件的 eveent.target 怎么判断是否在某个div内部呢？可以使用DOM专有扩展的contains方法",
    "keywords": "怎么判断当前鼠标是否在某个div内部,怎么判断当前event.target在某个div内部",
    "category": "Javascript"
  },
  {
    "source": "当if else逻辑较多时可以使用策略模式.md",
    "staticFileName": "if_else_handle.html",
    "author": "guoqzuo",
    "createDate": "2020/01/08",
    "description": "当项目中，if else较多时，我们可以考虑使用策略模式，来更优雅的处理，来看看demo",
    "keywords": "js策略模式的使用场景",
    "category": "计算机基础与开发工具"
  },
  {
    "source": "IE下dialog弹窗全屏后列表横向滚动卡顿的问题.md",
    "staticFileName": "ie_scorll_slow.html",
    "author": "guoqzuo",
    "createDate": "2020/01/08",
    "description": "全屏后添加了一个名为 is-fullscreen 的class，发现把对应的overflow:auto去掉后，就不会卡顿。去掉其实就是将overflow设置为默认值visible，如果子组件高度超出范围，将is-fullscreen设置的height 100% 改为 auto。另一种方法是将table的z-index改为3000(相对dialog比较高的一个层级)，这样IE下就不会卡顿了。",
    "keywords": "Element表格IE下由于滚动条原因导致错位问题",
    "category": "Vue"
  },
  {
    "source": "JS遍历数组方法总结，forEach的缺点以及与for..of和for...in的区别.md",
    "staticFileName": "js_array.html",
    "author": "guoqzuo",
    "createDate": "2020/01/09",
    "description": "在ES5中新增了很多方便操作数组的方法，包括新5种数组的迭代方法：forEach, map, filter, some, every；缩小方法：reduce()；检测数组方法Array.isArray()等，这些方法让操作数组更加优雅，趋近于函数式编程. 在ES6中又增加了for..of以及values,entres,keys等，下面来详细看看",
    "keywords": "js遍历数组方法总结,es5 es6遍历数组方法,forEach的缺点以及与for..of和for...in的区别",
    "category": "Javascript"
  },
  {
    "source": "包含await操作的函数被二次封装成函数，await该函数时执行顺序的问题.md",
    "staticFileName": "js_await_seq.html",
    "author": "guoqzuo",
    "createDate": "2020/01/09",
    "description": "包含await操作的函数被二次封装成函数，await该函数时执行顺序需要注意，当一个包含await的函数A，被另一个函数B包裹，当await函数B执行时，如果包裹函数B里并没有return函数A或await函数A，await函数B执行时并不会等到函数A全部执行完毕才继续执行，来看个例子",
    "keywords": "async await执行顺序的额问题，如果await的非promise不会等待",
    "category": "Javascript"
  },
  {
    "source": "node path.resolve().md",
    "staticFileName": "node_path.html",
    "author": "guoqzuo",
    "createDate": "2020/01/10",
    "description": "koa静态文件服务中间件的实现里，需要将当前路径 __dirname 与用户传入的路径合并为一个绝对路径，就可以使用path.resolve函数",
    "keywords": "node path.resolve,node路径处理",
    "category": "前端工程化"
  },
  {
    "source": "-- css变量的使用，var() 与变量 --.md",
    "staticFileName": "css_var.html",
    "author": "guoqzuo",
    "createDate": "2020/01/10",
    "description": "在less或sass中，有直接的变量定义方法，而css原生其实也是可以定义变量的，使用--和var即可",
    "keywords": "css变量,-- css变量的使用，var() 与变量 --",
    "category": "CSS"
  },
  {
    "source": "markdown里怎么为文字添加颜色，怎么画复杂表格.md",
    "staticFileName": "markdown_html.html",
    "author": "guoqzuo",
    "createDate": "2020/01/11",
    "description": "之前看markdown语法时，并没有添加颜色和复杂表格的方法，但最近了解到markdown里面可以直接使用html，那就方便了。复杂表格直接使用table标签画，如果想给文字加颜色，使用如下方法",
    "keywords": "markdown里怎么为文字添加颜色,markdown里怎么画复杂表格,markdown使用html时注意事项",
    "category": "计算机基础与开发工具"
  },
  {
    "source": "npm install简写为npm i安装包时项目文件名与包名冲突不报异常的问题.md",
    "staticFileName": "npm_i.html",
    "author": "guoqzuo",
    "createDate": "2020/01/14",
    "description": "最近在安装 npm install 时喜欢简写 npm i mysql2 -s 但发现执行后，并没有安装成功，在package.json里也没有任何记录。还没有报任何错误。",
    "keywords": "npm install简写为npm i注意事项,npm init -y注意事项",
    "category": "前端工程化"
  },
  {
    "source": "node遍历文件夹下的文件再require对应的文件出错，要注意.DS_Store隐藏文件.md",
    "staticFileName": "node_for_DS_Store.html",
    "author": "guoqzuo",
    "createDate": "2020/01/16",
    "description": "在使用koa mock接口时，一个模块有很多接口，就写了十几个js，每个js对应一个接口数据。如果每增加一个接口，再添加一个require就很麻烦，于是写了个index.js来遍历文件夹，进行动态引入。以后写好js，就不用再手动require了。之前都运行正常的，最近再运行时发现一直报错，require异常。后来打印遍历的fileName，发现居然有 .DS_Store 文件，require这个文件时错误。这个文件属于mac系统自动生成的文件，之前都没有的。在程序中过滤调这个文件即可。",
    "keywords": "node遍历文件夹下的文件时需要过滤.DS_Store隐藏文件",
    "category": "前端工程化"
  },
  {
    "source": "JS sleep测试loading时写的等待函数最简代码.md",
    "staticFileName": "js_sleep.html",
    "author": "guoqzuo",
    "createDate": "2020/01/19",
    "description": "一般想模拟延时，测试loading效果时，会写一个等待函数，怎么最简单方便呢？下面来研究下",
    "keywords": "js sleep测试loading时写的等待函数最简代码",
    "category": "Javascript"
  },
  {
    "source": "零编码或少编码根据配置生成通用封装的axios函数.md",
    "staticFileName": "axios_package.html",
    "author": "guoqzuo",
    "createDate": "2020/01/19",
    "description": "现在项目中，每个模块都会单独弄一个对应service.js，把所有接口请求放到里面，其实就是将axios请求封装为一个个函数。每个函数的函数名、url、请求方法会有所差别。重复代码比较多。最近在看mongodb教程时，了解到零编码编程的思想，于是想把这里优化下，最好以后写新模块时，只要写简单的配置文件就可以自动生成函数，不用再单独手写函数",
    "keywords": "axios二次封装,axios服务封装",
    "category": "http与https"
  },
  {
    "source": "JS sort对数组进行默认排序时如果有数字为什么会不准确？.md",
    "staticFileName": "js_sort_num.html",
    "author": "guoqzuo",
    "createDate": "2020/01/21",
    "description": "正常情况使用 sort 是好用的，但如果有数字时，会有问题，因为如果sort不传参，默认情况下会将所有元素转换为字符串后，再根据unicode值来进行排序，下面我们来看看对应的实例",
    "keywords": "js sort数组不准确,js sort负数不准确, js sort对数组排序时的坑",
    "category": "Javascript"
  },
  {
    "source": "JS 为什么使用set对数组或对象去重时会无效？.md",
    "staticFileName": "js_set.html",
    "author": "guoqzuo",
    "createDate": "2020/01/21",
    "description": "我们知道Set是JS的一个种新的数据结构，和数组类似，和数组不同的是它可以去重，比如存入两个1或两个'123'，只有1条数据会存入成功，但有个特殊情况，如果添加到set的值是引用类型，比如数组、对象，他将无法自动去重。因为值相同的两个引用类型地址是不一样的。下面来看一个例子：",
    "keywords": "js set去重对数组，对象无效,为什么使用set对数组或对象去重时会无效",
    "category": "Javascript"
  },
  {
    "source": "nginx怎么开启gzip以及怎么判断nginx是否成功开启了gzip？.md",
    "staticFileName": "nginx_gzip.html",
    "author": "guoqzuo",
    "createDate": "2020/01/29",
    "description": "nginx是比较好的一个运行静态http服务的容器。当我们把静态网站部署到nginx上后，我们怎么设置开启zip，让网页资源体积更小，传输更快呢？下面来看看",
    "keywords": "nginx怎么开启gzip,怎么判断nginx是否成功开启了gzip,怎么判断nginx开启gzip生效",
    "category": "运维部署与版本控制"
  },
  {
    "source": "静态博客生成系统(一)：JS怎么将markdown文件转html.md",
    "staticFileName": "zuoblog_1_md.html",
    "author": "guoqzuo",
    "createDate": "2020/01/29",
    "description": "其实早在18年12月，我就已经写好了最简的demo，使用的是marked这个工具。本来准备将博客静态化的，但后来就没继续了，这里来说下方法",
    "keywords": "怎么用js将markdown转html,markdown转html文件",
    "category": "前端工程化"
  },
  {
    "source": "开源许可MIT等具体含义.md",
    "staticFileName": "os_licence.html",
    "author": "guoqzuo",
    "createDate": "2020/01/30",
    "description": "一般新建一个开源仓库时，需要确定开源协议。之前习惯是MIT，就是别人拿去干什么都可以。对于一些需要控制他人使用的就需要其他协议了。阮一峰博客里有一张图来解释很清晰明了",
    "keywords": "开源许可MIT等具体含义,开源许可licence含义",
    "category": "计算机基础与开发工具"
  },
  {
    "source": "网页seo之将链接提交到搜索引擎进行评定收录.md",
    "staticFileName": "seo_commit.html",
    "author": "guoqzuo",
    "createDate": "2020/01/30",
    "description": "最近对zuo11.com进行了改版，完成了博客的静态化并完成了上线，nginx + 静态文件代替了原来的 tomcat + jsp + mysql的模式。针对百度收录与索引，google收录，做了一些处理。",
    "keywords": "提交站点链接到百度,提交链接到google",
    "category": "网站建设与SEO"
  }
]


