[
    {
        "source": "为什么会有Node.js，其衍生框架Express、Koa、Egg.js的演进过程.md",
        "staticFileName": "why_node.html",
        "author": "guoqzuo",
        "createDate": "2020/08/02",
        "description": "为什么会有Node.js，在前端开发中，经常会用到node.js，那大家有没有想过 为什么会出现node.js这个技术？它解决了前端开发中的哪些问题？假设在前端面试中问你这个问题？你会怎么回答，下面是我自己的一个理解",
        "keywords": "为什么会有Node.js,node.js的不足",
        "category": "前端工程化"
    },
    {
        "source": "UI设计视觉差问题，总感觉没有居中对齐时怎么办.md",
        "staticFileName": "ui_vision_difference.html",
        "author": "guoqzuo",
        "createDate": "2020/08/02",
        "description": "当实现设计稿后，总感觉上下没对齐，怎么办呢？建议放大n倍，截图画框，看是否在一条水平线上。这里涉及到视觉差的问题，下面来看看相关知识，测量面积和视觉面积 - 视觉体量是人眼如何察觉物体的大小和感觉，不需要等同于物体的实际像素值 - 圆、菱形、三角形和其他非方形形状为了与方形形状保持一样的视觉大小，应适当放大",
        "keywords": "视觉差,视觉差怎么解决,UI视觉差,iconfont上为什么有的图标周围有留白，而有的图标没有留白的原因",
        "category": "css"
    },
    {
        "source": "关于商品价格有小数点时精度异常的问题.md",
        "staticFileName": "goods_price_float.html",
        "author": "guoqzuo",
        "createDate": "2020/08/02",
        "description": "在价格显示时，如果有小数位，由于js浮点数的缺陷，累加的价格可能会有经度差，我们直接 toFixed(2) 即可。一般不会超过3位小数点，且精度异常一般都是小数点很多位以后，注意js小数点运算时一定要注意这个问题，确定要保留几位小数点",
        "keywords": "商品价格有小数点时精度异常的问题",
        "category": "js"
    },
    {
        "source": "0-9数字中，每个数字的宽度是多少.md",
        "staticFileName": "number_width.html",
        "author": "guoqzuo",
        "createDate": "2020/08/02",
        "description": "什么数字最宽，以字体PingFangSC-Regular，大小12px为例, 一般宽度 1 < 7 < 0,2,3,4,5,6,8,9  但不排除其他字体没有差异，同理我们可以使用这种方法看26个字母里每个字母的占用宽度为多少",
        "keywords": "数字宽度,什么数字最宽",
        "category": "css"
    },
    {
        "source": "使用ssh方式拉取代码的步骤.md",
        "staticFileName": "git_ssh.html",
        "author": "guoqzuo",
        "createDate": "2020/08/02",
        "description": "在使用git拉取远程分支代码时，有两种方式，一种是git clone，另一种是 ssh。在文件太大git clone超时时，我们可以试试ssh这种方法，下面来看看具体步骤",
        "keywords": "git ssh",
        "category": "运维部署与版本控制"
    },
    {
        "source": "git删除远程分支与本地分支.md",
        "staticFileName": "git_branch_del.html",
        "author": "guoqzuo",
        "createDate": "2020/08/02",
        "description": "git删除分支,git删除远程分支,git怎么删除远程分支,当我们常见远程分支，使用完成后，怎么删除远程的分支呢？我们以删除file_backup分支为例，来看看具体步骤 1. 先查看本地分支 2. 删除远程的file_backup分支 3. 删除本地分支",
        "keywords": "git删除分支,git删除远程分支,git怎么删除远程分支",
        "category": "运维部署与版本控制"
    },
    {
        "source": "Object.observe()与Proxy.md",
        "staticFileName": "observe_proxy.html",
        "author": "guoqzuo",
        "createDate": "2020/08/02",
        "description": "Object.observe()是js实现观察者设计模式的一个API，现在已废弃，由Proxy取代，但Proxy不支持IE。它用于异步地监视一个对象的修改。当对象属性被修改时，方法的回调函数会提供一个有序的修改流。在vue2.0的双向绑定的实现里，会遍历data对象，通过建立对应的getter/setter访问器属性来追踪属性变化。Vue 3.0里已使用Proxy来追踪属性变化",
        "keywords": "observe与proxy",
        "category": "js"
    },
    {
        "source": "WebSocket的使用场景.md",
        "staticFileName": "websocket_scene.html",
        "author": "guoqzuo",
        "createDate": "2020/08/10",
        "description": "WebSocket是HTML5开始提供的一种在单个TCP连接上进行全双工通讯的协议。之前在工作中基本没用到过，今天偶然看到一个网站，他里面列出了WebSocket的几种使用场景，如下：在线多人点菜、远程画版同步、在线选座、游戏 (只要涉及到多人对战、协同的就需要用到)、扫码登录/支付、IM 聊天",
        "keywords": "WebSocket的使用场景,websocket可以做什么",
        "category": "计算机基础与开发工具"
    },
    {
        "source": "为什么要写单元测试.md",
        "staticFileName": "why_unit_test.html",
        "author": "guoqzuo",
        "createDate": "2020/08/10",
        "description": "20/04/30日发版，持续到到今天凌晨2点左右，测试发现有个bug：时间区间组件DatePicker前面一个时间没有显示，而这里应该显示最近一周的时间区间，现在只显示了后面一个时间。但测试环境测试、UAT测试都是过了的，怎么突然就有问题了呢？于是看同事的代码定位问题，发现根据当前时间计算最近一周的日期逻辑有问题，只是简单粗暴的把 day 减了 6 天，之前一直是4月中下旬，大于6，所以没有出问题，这次正好是5月1号， 1 - 6 就是 -5 了, 时间拼接为 2020-05-0-5，这就导致有bug了。还好今天是5月1号，不然测不出这个bug就会导致后面生成环境的bug了。",
        "keywords": "为什么要写单元测试,单元测试有什么好处",
        "category": "计算机基础与开发工具"
    },
    {
        "source": "怎么看chrome浏览器更新记录及内容.md",
        "staticFileName": "chrome_update_log.html",
        "author": "guoqzuo",
        "createDate": "2020/08/10",
        "description": "最近发现办公电脑的chrome浏览器console里不支持 ?? 运算符，而我自己的电脑就可以，对比了下版本，我的是最新的81版本，而办公电脑还是71的版本，于是我就想看看chrome每次版本的更新记录，这个貌似要翻墙，我用了一个开源的chrome访问助手，找到了对应的位置",
        "keywords": "怎么看chrome浏览器更新记录及内容,怎么看chrome浏览器每个版本更新了什么",
        "category": "计算机基础与开发工具"
    },
    {
        "source": "uni复制功能只支持app、小程序，怎么兼容H5.md",
        "staticFileName": "uni_copy_h5.html",
        "author": "guoqzuo",
        "createDate": "2020/08/10",
        "description": "uni复制功能只支持app、小程序，怎么兼容H5呢？当H5时，我们可以引导用户自己选择后copy，如果是app调用uni的api，代码如下",
        "keywords": "uni复制兼容H5,uni复制 h5",
        "category": "移动端混合开发"
    },
    {
        "source": "uni动态修改导航栏按钮文案.md",
        "staticFileName": "uni_eidt_nav.html",
        "author": "guoqzuo",
        "createDate": "2020/08/10",
        "description": "一般uni导航栏按钮是在配置文件里面写的，那怎么动态的修改配置呢？先来看导航栏按钮配置文件，导航栏右侧有一个按钮 编辑",
        "keywords": "uni动态修改导航栏按钮、文案",
        "category": "移动端混合开发"
    },
    {
        "source": "vue多层级组件，父组件怎么将事件传递给孙组件?.md",
        "staticFileName": "vue_listeners.html",
        "author": "guoqzuo",
        "createDate": "2020/08/10",
        "description": "来看一个例子，假设A组件包含组件B，B组件又包含组件C，我们知道，在B组件里 this.$emit('open-tab') 会执行其父组件A里面对应的方法，但如果B的子组件C，也想触发A组件的事件，那要怎么做呢？",
        "keywords": "vue多层级组件，父组件怎么将事件传递给孙组件",
        "category": "vue"
    },
    {
        "source": "vue动态组件怎么动态绑定一个或多个v-bind属性.md",
        "staticFileName": "component_vbind.html",
        "author": "guoqzuo",
        "createDate": "2020/08/10",
        "description": "最近有封装一个tabs标签页组件，引入组件，可以将页面进行tab化。原先的页面作为子组件放到tabs组件里，由于标签页跳转页面时有需要打开新的标签页。所以tabs组件里会包含多个页面组件，为了避免像el-tabs那样，每次引入tabs组件都需要自己写v-if的逻辑来切换tab显示。我把这一步封装到了自定义tabs组件内部，内部使用动态组件component、is来切换组件显示。",
        "keywords": "动态组件怎么动态绑定一个或多个v-bind属性",
        "category": "vue"
    },
    {
        "source": "vue在自定义组件上使用v-model指令.md",
        "staticFileName": "custom_comp_v_model.html",
        "author": "guoqzuo",
        "createDate": "2020/08/15",
        "description": "vue自定义组件使用使用v-model,vue v-model,vue v-model原理,vue v-model内部实现,在自定义组件上，使用v-model指令，默认会向子组件传递一个字段名为 value 的 prop 属性，以及绑定一个名为 input 的事件。在子组件里，可以用props来接收value字段，可以用 this.$emit('input') 来对父组件里value的值进行修改。它主要的应用在子组件需要修改父组件属性值的情况，你不需要额外再调用子组件时，传递一个修改值的事件，节省了一个事件监听。来看看示例",
        "keywords": "vue自定义组件使用使用v-model,vue v-model,vue v-model原理,vue v-model内部实现",
        "category": "vue"
    },
    {
        "source": "vue中v-model与.sync的区别.md",
        "staticFileName": "v-model_vs_sync.html",
        "author": "guoqzuo",
        "createDate": "2020/08/15",
        "description": "v-model与.sync的区别,v-model vs .sync, vue v-model与 .sync的区别,一般父组件给子组件传值是单向的，对于非引用类型，子组件怎么修改父组件传给子组件prop对应的值呢？除了通过 $parent、$root、Bus(发布，订阅)、状态管理(vuex)、额外定义一个方法外，还有两种方法：使用 v-model，或者为加.sync，来看下对比",
        "keywords": "v-model与.sync的区别,v-model vs .sync, vue v-model与 .sync的区别",
        "category": "vue"
    },
    {
        "source": "vue中$attrs 和 $listeners 的使用场景.md",
        "staticFileName": "vue_attrs_listeners.html",
        "author": "guoqzuo",
        "createDate": "2020/08/15",
        "description": "$attrs与$listeners,vue $attrs,vue $listeners,vue $attrs使用场景,vue $listeners使用场景,在vue中，$attrs，$listeners 分别记录了当前组件上绑定的属性以及事件，一般可能用的比较少，下面来看看。`v-bind=$attrs` 他类似属性展开运算符，将父组件调用子组件时传入的属性展开(不包含props已接收的)、v-bind到当前的元素上。listeners除了跨层级向下传递事件外，还可以用于将原生事件绑定到组件",
        "keywords": "$attrs与$listeners,vue $attrs,vue $listeners,vue $attrs使用场景,vue $listeners使用场景",
        "category": "vue"
    },
    {
        "source": "vue为什么要将插槽slot='aaa'的写法变更为v-slot:aaa.md",
        "staticFileName": "slot_vs_v-slot.html",
        "author": "guoqzuo",
        "createDate": "2020/08/15",
        "description": "vue slot v-slot区别,v-slot是slot的语法糖，在 2.6.0 中，我们为具名插槽和作用域插槽引入了一个新的统一的语法 (即 v-slot 指令)。它取代了 slot 和 slot-scope 这两个目前已被废弃但未被移除。具名插槽 主要用于当有多个插槽时，通过名字对不同的插槽进行区分，先来看看聚名插槽使用时的一个特殊场景，由于在父组件里调用用子组件，会写上对应的插槽，这时插槽的作用域为当前的父组件，插槽内部使用的变量名默认都是从父组件取的。下面的例子中 slotA插槽内部调用的 user，它默认是当前组件的变量（父组件）",
        "keywords": "vue slot v-slot区别,v-slot是slot的语法糖",
        "category": "vue"
    },
    {
        "source": "vue组件之间传值(通信)方式总结.md",
        "staticFileName": "vue_comp_transmit.html",
        "author": "guoqzuo",
        "createDate": "2020/08/15",
        "description": "vue组件之间传值,vue传值方式,vue传值方式总结,vue通信方式总结,在vue中一般组件之间传值是必须要理解的，下面来总结下组件间传值的方法，分为以下几种情况 1. 父组件 => 子组件 2. 子组件 => 父组件 3. 兄弟组件 4. 父组件 => 子组件 5. 祖先和后代之间 6. 任意两个组件之间",
        "keywords": "vue组件之间传值,vue传值方式,vue传值方式总结,vue通信方式总结",
        "category": "vue"
    },
    {
        "source": "vue里简单的总线(bus)发布订阅模式实现.md",
        "staticFileName": "vue_on_emit.html",
        "author": "guoqzuo",
        "createDate": "2020/08/15",
        "description": "vue publish/subscription,vue发布订阅模式实现,vue bus发布订阅实现, 在vue组件内部有实现发布订阅模式，类似于bus，在兄弟组件或任意两组件之间传值可以使用这种方法，那内部是怎么实现的呢？我们先写一个调用demo",
        "keywords": "vue publish/subscription,vue发布订阅模式实现,vue bus发布订阅实现",
        "category": "vue"
    },
    {
        "source": "vue项目文件以及文件夹命名规范问题，前端代码规范风格指南.md",
        "staticFileName": "vue_code_style.html",
        "author": "guoqzuo",
        "createDate": "2020/08/15",
        "description": "vue代码规范,vue命名规范,vue组件命名,前端代码规范,前端代码风格指南,vue代码风格指南,vue文件命名,在以vue为主的开发中，vue项目文件以及文件夹命名规范文件，在开发团队里面是需要统一的。我们尽量按照一种规范来开发，形成一种风格，这样更有利于项目迭代维护，下面来逐一介绍：1.个人总结的vue功能组件、目录结构风格 2.业界较权威的风格指南 3.其他风格",
        "keywords": "vue代码规范,vue命名规范,vue组件命名,前端代码规范,前端代码风格指南,vue代码风格指南,vue文件命名",
        "category": "vue"
    },
    {
        "source": "vue为什么建议永远不要把 v-if 和 v-for 同时用在同一个元素上.md",
        "staticFileName": "v-if_v-for.html",
        "author": "guoqzuo",
        "createDate": "2020/08/15",
        "description": "vue v-if为什么不能和v-for一起用,vue v-if v-for一起用,vue v-if和v-for一起时优先级,在vue风格指南中，将'避免 v-if 和 v-for 用在一起'列为必要优先级，建议永远不要把 v-if 和 v-for 同时用在同一个元素上。官网文档如下: 一般我们在两种常见的情况下会倾向于这样做： 1. 为了过滤一个列表中的项目 (比如 v-for='user in users' v-if='user.isActive')。在这种情形下，请将 users 替换为一个计算属性 (比如 activeUsers)，让其返回过滤后的列表。2. 为了避免渲染本应该被隐藏的列表 (比如 v-for='user in users' v-if='shouldShowUsers')。这种情形下，请将 v-if 移动至容器元素上 (比如 ul、ol)。",
        "keywords": "vue v-if为什么不能和v-for一起用,vue v-if v-for一起用,vue v-if和v-for一起时优先级",
        "category": "vue"
    }
]




