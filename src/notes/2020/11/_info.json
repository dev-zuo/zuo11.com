[
  {
    "source": "Vue 父组件在什么时候开始加载子组件，父子组件的钩子函数顺序是什么？.md",
    "staticFileName": "vue_son_hooks.html",
    "author": "guoqzuo",
    "createDate": "2020/11/08",
    "description": "一般父组件会在自身组件 mounted 后，开始加载子组件，下面来通过一个例子来看完整的父子组件钩子函数。下面的例子中在 index.vue 以及 compA.vue 父子组件中都加了对应的钩子函数 console。父组件 beforeCreate => 父组件 created => 父组件 beforeMount => 父组件 mounted => 父组件 beforeUpdate => 子组件 beforeCreate => 子组件 created => 子组件 beforeMount => 子组件 mounted => 父组件 index updated",
    "keywords": "vue父组件在什么时候开始加载子组件,vue父子组件钩子函数顺序",
    "category": "Vue"
  },
  {
    "source": "eslintignore不生效, vscode eslint插件不同版本有差异的问题.md",
    "staticFileName": "eslintignore_vscode.html",
    "author": "guoqzuo",
    "createDate": "2020/11/08",
    "description": ".eslintignore 文件的作用是，当不想对项目的某个目录进行 eslint 检查时，可以在这个文件中声明，类似 .gitignore 文件的效果。但有一个问题，vscode eslint插件不同版本的行为可能有差异，有可能把目录加入到了.eslintignore 后，保存时还是会 fix 这个目录下的 eslint 错误。这种情况建议升级到最新版本。",
    "keywords": ".eslintignore不生效,vscode eslint插件不同版本差异",
    "category": "计算机基础与开发工具"
  },
  {
    "source": "Vue 子组件名称与父组件name相同时死循环的问题.md",
    "staticFileName": "vue_stacksize_exceeded.html",
    "author": "guoqzuo",
    "createDate": "2020/11/08",
    "description": "在vue项目中，假设父组件name与子组件名称一致，会造成死循环，出现 Error in nextTick: 'RangeError: Maximum call stack size exceeded' 的错误，template在编译时，不会去找 components 引入的组件，而是直接引入自己，形成一个循环引用、递归组件，要特别注意。",
    "keywords": "vue组件循环引用,vue递归组件,Maximum call stack size exceeded",
    "category": "Vue"
  },
  {
    "source": "Vue keep-alive在路由跳转时按需缓存当前页面数据，$route非双向绑定的问题.md",
    "staticFileName": "keep-alive-include.html",
    "author": "guoqzuo",
    "createDate": "2020/11/08",
    "description": "有这么一个需求，页面 B 跳转到页面 C 时需要保存页面交互数据，跳到其他页面不缓存数据。在 Vue 中这种功能一般会使用 keep-alive 的 include 或 exclude 有条件的缓存来实现。起初我想省事，直接使用 $route.meta 来动态修改 include 值，但后面发现不生效，原来 $router.meta 不是双向绑定的，需要使用其他变量才行，下面来看看具体逻辑。",
    "keywords": "vue keep-alive按需缓存页面,vue按需缓存,$route是否是双向绑定的",
    "category": "Vue"
  },
  {
    "source": "不全局安装npm包，怎么在项目目录下局部执行对应的命令.md",
    "staticFileName": "npm_cmd_part.html",
    "author": "guoqzuo",
    "createDate": "2020/11/08",
    "description": "一般在 Vue 开发中，vue 命令可以执行，是因为全局安装了 `@vue/cli` npm包。假设你无法使用 npm install -g 全局安装，那怎么在当前项目所在的目录运行对应的命令呢？这里我们使用 zuo-util 这么 npm 包来介绍 3 种在项目种运行 npm 包命令的方法：1. npm run xxx 2. npx 命令 3. ./node_modules/.bin/命令",
    "keywords": "局部执行npm包命令,不全局安装npm包，怎么在项目中运行命令,局部执行命令",
    "category": "前端工程化"
  },
  {
    "source": "mac下怎么截取屏幕gif图：Gifox.md",
    "staticFileName": "mac_gif_tools.html",
    "author": "guoqzuo",
    "createDate": "2020/11/08",
    "description": "之前在 windows 下用过一款比较好用的免费 gif 工具。后面在 mac 上，就没怎么做 gif 图了。最开始在 mac 上尝试做 gif 图是使用 QuickTime 录制屏幕后，再搜索在线视频转 gif 图的网站进行转换，比较麻烦。最近发现一个比较好的软件 [Gifox](https://gifox.io/)，我使用的是免费版的，有水印，最大长度限制为10s。升级付费的版本可以去水印(watermark)，且没有10s限制。它功能强大，录制gif很方便",
    "keywords": "mac gif,mac好用的gif工具,mac做gif图",
    "category": "计算机基础与开发工具"
  },
  {
    "source": "涉及到状态code相关判断逻辑，建议使用常量.md",
    "staticFileName": "code_logic.html",
    "author": "guoqzuo",
    "createDate": "2020/11/08",
    "description": "对于一些状态较多的场景，当我们需要进行一些逻辑时，如果我们用状态的code来写判断逻辑。当后端提供的这个状态文案、code变更或调整，改动可能会很麻烦，特别是功能较多时。对于状态相关的判断逻辑，尽量把状态定义为容易识别的常量。这样状态名或状态code变更后，就不需要做大量修改了。",
    "keywords": "code消除魔术字符串,code判断逻辑使用常量",
    "category": "JavaScript"
  },
  {
    "source": "js生成二维码怎么实现.md",
    "staticFileName": "js_qrcode.html",
    "author": "guoqzuo",
    "createDate": "2020/11/08",
    "description": "QRCode.js 是一个生成二维码的 js 库，使用 HTML5 Canvas 将二维码绘制到 dom 上，不依赖任何库。支持 svg 绘制方式。QRCode.js is javascript library for making QRCode. QRCode.js supports Cross-browser with HTML5 Canvas and table tag in DOM. QRCode.js has no dependencies. QRCode.js 使用很简单，下面来写一个自动生成二维码的工具",
    "keywords": "js生成二维码,前端生成二维码,js生成二维码链接",
    "category": "JavaScript"
  },
  {
    "source": "Vue 单元测试.md",
    "staticFileName": "vue_unit_test.html",
    "author": "guoqzuo",
    "createDate": "2020/11/16",
    "description": "在 Vue.js 官网，学习 => CookBook 下有一个 Vue 组件的单元测试 文档。为什么要测试？组件的单元测试的好处: 节省手动测试的时间，减少研发新特性时产生的 bug，自动化测试使得大团队中的开发者可以维护复杂的基础代码。Vue Test Utils 是 Vue 组件单元测试的官方库。他的作者写了一本书 《Testing Vue.js Applications》，对应的中文版本是《Vue.js应用测试》，如果想系统的学习 Vue 应用测试，建议看这本书。",
    "keywords": "vue单元测试,vue测试,vue应用测试",
    "category": "Vue"
  },
  {
    "source": "什么是e2e test，除了单元测试外还有什么测试？.md",
    "staticFileName": "e2e_test.html",
    "author": "guoqzuo",
    "createDate": "2020/11/16",
    "description": "e2e 是 end to end 的缩写，翻译为端到端测试。单元测试只是整个测试金字塔中的一部分。其他类型的测试还包括 e2e(端到端)测试，快照比对测试等。e2e(端到端)测试致力于确保组件的一系列交互是正确的。相比简单快速的单元测试，它是更高级别的测试，例如可能会测试用户是否注册、登录以及更新他们的用户名。这种测试运行起来会比单元测试和快照比对测试慢一些。运行起来会更慢很多。这些测试通常只在部署前运行，来确保系统的每个部分都能够正常的协同工作。",
    "keywords": "e2e test,e2e test示例,端到端测试",
    "category": "Vue"
  },
  {
    "source": "xx.github.io偶尔访问不了是为什么？.md",
    "staticFileName": "github_io_failure.html",
    "author": "guoqzuo",
    "createDate": "2020/11/16",
    "description": "在 Github 上开启 Pages 服务后，可以通过 xx.github.io 访问对应的网页。但偶尔会出现打不开的问题，之前都是可以打开的，试了其他人的 github.io，发现也打不开，这就不是自己网络的问题了。网上查原因是电信运营商 DNS 污染（域名解析不到正确的 IP 地址）。我们在本地手动设置 host 指定对应域名的解析 IP 即可正常访问。下面来看具体怎么操作",
    "keywords": "xx.github.io打不开,github.io打不开,githu.io访问不了",
    "category": "运维部署与版本控制"
  },
  {
    "source": "ssh生成rsa key时Enter passphrase加和不加有什么区别.md",
    "staticFileName": "ssh_passphrase.html",
    "author": "guoqzuo",
    "createDate": "2020/11/16",
    "description": "在使用 ssh 拉取 git 仓库前，需要先生成公共/私有 rsa 密钥对。(Generating public/private rsa key pair.)，一般使用 `ssh-keygen -t rsa -C '邮箱@xx.com'` 命令，这个时候，会有下面的提示：Enter passphrase (empty for no passphrase): 输入通行码(密码、口令短语)，如果不输入，那么就是不使用密码。如果输入了密码，这个有什么用呢？",
    "keywords": "ssh passphrase,ssh passphrase有什么用",
    "category": "运维部署与版本控制"
  },
  {
    "source": "使用git ssh方式解决RPC failed; HTTP 413 curl 22 The requested URL returned error: 413.md",
    "staticFileName": "git_http_413.html",
    "author": "guoqzuo",
    "createDate": "2020/11/16",
    "description": "由于改了博客生成系统的生成方式，每个html都改了，导致文件相对较多，也不算大，才 4.57 M, 但 git push 一直push不了，提示如下 error: RPC failed; HTTP 413 curl 22 The requested URL returned error: 413 fatal: the remote end hung up unexpectedly，网上查了下，可以改用 ssh 的方式 push 代码，结合之前的经验，大文件 git clone 不下来，可以换 ssh 方式 git clone。",
    "keywords": "RPC failed; HTTP 413 curl 22,The requested URL returned error: 413,fatal: the remote end hung up unexpectedly",
    "category": "运维部署与版本控制"
  },
  {
    "source": "Google AdSense被拒理由网站已下线或无法访问怎么解决.md",
    "staticFileName": "adsense_cannot_found.html",
    "author": "guoqzuo",
    "createDate": "2020/11/16",
    "description": "在自己网站的 head 部分加入 AdSense 的校验代码后，会有一段审核的时间。在这个过程中，网站可能会有来自福建龙岩的 203.208.60.* IP段蜘蛛来爬取你的网页。蜘蛛会爬取JS渲染后的效果，可以触发百度统计等js代码。不用屏蔽，这属于 Google 蜘蛛正常爬取，Google Analytics 在计算访客时会忽略这一部分访客信息。蜘蛛爬完的第二天，就收到了邮件，说审核不通过，看了下原因：'网站已下线或无法访问怎么解决' ，如下图所示。但我的网站是确定可以正常访问的。",
    "keywords": "AdSense网站已下线或无法访问",
    "category": "网站建设与SEO"
  },
  {
    "source": "Google Analytics、Google AdSense、Google Search Console分别是干什么的?.md",
    "staticFileName": "google_web_tools.html",
    "author": "guoqzuo",
    "createDate": "2020/11/16",
    "description": "在站点管理这一块，Google的工具有好几个，我现在知道的有三个，他们分别对应不同的功能，下面来看看他们的介绍、区别：Google Search Console，搜索控制台| 站长工具、sitemap提交，展现量/点击量简单查看，死链提交等；Google Analytics 偏数据分析，统计实时用户/累计用户/会话时长/跳出率等，受众群体、流量来源、转化率、页面价值等；Google AdSense 广告联盟 | 用于在自己站点投放 Google 广告，赚取收益",
    "keywords": "Google Analytics,Google AdSense,Google Search Console",
    "category": "网站建设与SEO"
  },
  { 
    "source": "JS append 和 appendChild 的区别.md",
    "staticFileName": "append_append.html",
    "author": "guoqzuo",
    "createDate": "2020/11/16",
    "description": "在 JS 高程 3 中，并没有讲到 append()，基本都是用的 appendChild()，所以有知识盲点，这里对比下 append() 和 apendChiild() 的区别，如下表所示：append 用于在元素内容里追加一个 Node 节点，appendChiled() 用于在元素内容里追加一个或多个 Node 节点或 String，注意，如果 append 或 appendChild 的元素是已经存在的，会移动该元素，如果需要保持原来的不移动，需要先 cloneNode, 下面来看一个例子",
    "keywords": "append appendChild区别,append()和appendchild(),append和appendChild",
    "category": "JavaScript"
  },
  {
    "source": "Chrome DevTools Network Waterfall 瀑布图各阶段详解.md",
    "staticFileName": "chrome_waterfall.html",
    "author": "guoqzuo",
    "createDate": "2020/11/23",
    "description": "在Chrom调试工具Network tab下，每个请求都有一个Waterfal diagrams(瀑布图)，点击具体接口，Timming(时序)位置会有具体描述。它记录了网络请求各个阶段的耗时，可以用于分析页面加载性能。Timing breakdown phases explained（时序分解阶段明细）。Here's more information about each of the phases you may see in the Timing tab:（下面是在Timing标签页中能看到的各个阶段的更多信息）",
    "keywords": "chrome瀑布图,Timming时序图",
    "category": "计算机基础与开发工具"
  },
  {
    "source": "图片占位、懒加载、预览.md",
    "staticFileName": "img_placeholder_lazyload.html",
    "author": "guoqzuo",
    "createDate": "2020/11/23",
    "description": "使用占位图片有什么好处? 1. 用户体验更好，标识此处有图片，但正在加载中的这一个状态，避免弱网或图片较大时，完全不显示的问题 2. 不阻塞其他资源加载，更快的整体文档加载速度，不阻塞其他请求。占位图片一般会和图片懒加载一起使用，当滚动到该区域时再加载图片，减少不必要的并发网络请求。3. 可以避免回流/重排，让图片加载完成后不改变页面的整体布局，避免回流(重新布局)，只需要重绘，注意: 需要占位图片与实际图片宽高不变",
    "keywords": "怎么实现图片懒加载,图片占位好处,图片预览,image lazyload,图片懒加载",
    "category": "JavaScript"
  },
  {
    "source": "什么是回流(Reflow)和重绘(Repaint)？怎么避免？.md",
    "staticFileName": "css_reflow_repaint.html",
    "author": "guoqzuo",
    "createDate": "2020/11/23",
    "description": "什么是回流和重绘？ 浏览器使用流式布局模型 (Flow Based Layout)，浏览器把 HTML 解析成 DOM，把 CSS 解析为 CSDOM，DOM 和 CSDOM 合并就产生了 Render Tree(渲染树)，根据Render Tree，计算各个元素在页面中的大小和位置，绘制到页面上。",
    "keywords": "回流和重绘,reflow,repaint,css回流,css重绘",
    "category": "CSS"
  },
  {
    "source": "Script error产生原因与解决方法、调试技巧.md",
    "staticFileName": "script_error.html",
    "author": "guoqzuo",
    "createDate": "2020/11/23",
    "description": "一般为了安全起见，如果当前页面引入了跨域的 js 文件，当这个 js 文件出现错误，监听错误会无法获取对应的行号、真实的错误message。这种情况错误信息就是 Script error。本地来做一个试验，重现该问题，用 koa 写两个服务，分别监听 5001/5002端口，同时开启服务",
    "keywords": "script error,script error是什么错误",
    "category": "JavaScript"
  },
  {
    "source": "AMD、UMD、CommonJS、ES Modules的理解.md",
    "staticFileName": "amd_umd_commonjs.html",
    "author": "guoqzuo",
    "createDate": "2020/11/23",
    "description": "在 ES6 之前，JS 本身没有模块功能，社区出现了 CommonJS 和 AMD 等模块方案。从 ES6 开始, JS 开始原生支持模块，一般称之为 ES Modules。- CommonJS: 主要用于服务端，是 node 中使用的 require、module.exports。从 Node.js v13.2 版本开始，Node.js 已经默认打开了 ES6 模块支持。但需要采用 .mjs 后缀文件名。如果不希望将后缀名改成.mjs，可以在项目的package.json文件中，指定type字段为module。- AMD: Asynchronous Module Definition，异步模块定义，主要用于客户端(浏览器)，以 RequireJS 为代表 define、require -  UMD: Universal Module Definition，通用模块定义模式，主要用来解决 CommonJS 模式和 AMD 模式代码不能通用的问题，并同时还支持老式的全局变量规范。",
    "keywords": "AMD,UMD,CommonJS,ES Modules",
    "category": "前端工程化"
  },
  {
    "source": "HTTP2，怎么确定网站是否开启了HTTP2，HTTP3？.md",
    "staticFileName": "http2_http3.html",
    "author": "guoqzuo",
    "createDate": "2020/11/23",
    "description": "HTTP/2 是新一代的 HTTP 协议，于 2015 正式发布。相对 HTTP/1 来说，大幅提升了网页性能，绝大多数浏览器都支持了 HTTP/2。http 怎么开启 http2 呢？HTTP/2 现阶段必须使用 https，80端口就不要想了。HTTP/1.1 不足的地方 - 连接无法复用，每次请求都经历三次握手和慢启动 - HTTP/1.0 传输数据时，每次都需要重新建立连接，增加延迟。- HTTP/1.1 虽然加入 keep-alive 可以复用一部分连接，但域名分片等情况下仍然需要建立多个 connection，耗费资源，给服务器带来性能压力。",
    "keywords": "HTTP2,HTTP3,怎么开启HTTP/2",
    "category": "http与https"
  },
  {
    "source": "Let’s Encrypt 免费HTTPS证书.md",
    "staticFileName": "free_https.html",
    "author": "guoqzuo",
    "createDate": "2020/11/23",
    "description": "Let’s Encrypt 是一个非盈利TLS（Transport Layer Security) 证书颁发机构（CA），免费提供 https 证书。 由于 Let’s Encrypt 证书的有效期为 3 个月，所以一般使用程序来自动续期更换证书。官方推荐使用 Certbot 来管理，它可以一站式申请、续期证书。在 Certbot 官网选择部署服务器使用的软件及系统，会自动列出需要操作的步骤，如下图",
    "keywords": "免费https,https",
    "category": "http与https"
  },
  {
    "source": "pm2 process.yml You cannot define a mapping item when in a sequence.md",
    "staticFileName": "pm2_map.html",
    "author": "guoqzuo",
    "createDate": "2020/11/23",
    "description": "使用 pm2 运行 node 项目，`pm2 start process.yml` 后提示 You cannot define a mapping item when in a sequence，是 process.yml 配置文件的问题，修改下配置文件即可。将 `- script: app.js` 改为 `script: app.js` 重新运行就可以了",
    "keywords": "pm2 process.yml",
    "category": "前端工程化"
  }
]






