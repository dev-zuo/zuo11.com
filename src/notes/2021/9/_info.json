[
  {
    "source": "js 怎么减少 if else 嵌套, 使用函数封装、三元运算符等.md",
    "staticFileName": "reduce_if_else.html",
    "author": "guoqzuo",
    "createDate": "2021/09/09",
    "description": "在 if else 或函数嵌套层级较多，代码会逐渐变的难看，不好理解及维护。一般可以通过改变代码组织方式，来减少代码嵌套层级，这里主要介绍下面 5 种方法：1.将代码块按功能块封装成函数，减少函数内代码的嵌套层级 2. if 优化，逻辑假时 true，减少 if 中包含大量代码的情况 3...",
    "keywords": "js 怎么减少 if else 嵌套,js 怎么减少 if 嵌套,js 怎么减少函数嵌套,js 中 if else 替代写法",
    "category": "JavaScript"
  },
  { 
    "source": "mac 其他文件怎么清理，使用免费的腾讯柠檬清理代替 CleanMyMac.md",
    "staticFileName": "mac_clean.html",
    "author": "guoqzuo",
    "createDate": "2021/09/09",
    "description": "mac 存储空间里面的其他文件占用较多，它主要是一些碎片文件、缓存等，一般不通过工具软件很难清理。如下图：mac 清理工具中，CleanMyMac 算是比较知名的一个，但它是收费的，这里介绍一款国产免费的清理工具 - 腾讯柠檬清理，关于柠檬清理与其他同类产品的对比，官方写了一遍总结，可以看看",
    "keywords": "mac others clean,mac clean, mac 其他清理,mac 其他文件清理,mac 其他文件怎么清理,mac 垃圾清理软件",
    "category": "计算机基础与开发工具"
  },
  { 
    "source": "vue data 中以下划线开头的变量为 undefined, eslint 提示 Keys starting with '_' are reserved.md",
    "staticFileName": "vue_data_underline.html",
    "author": "guoqzuo",
    "createDate": "2021/09/09",
    "description": "在 vue 中，如果 data 中定义了以下划线开头的变量名，是无法获取到值的，一直是 undefined，为什么会这样呢？如果你安装了 eslint，会自动提示 Keys starting with '_' are reserved in '_test' group(vue/no-reserved-keys). 在官方文档 API 中有搜索 data 可以查到: 以 _ 或 $ 开头的 property 不会被 Vue 实例代理，因为它们可能和 Vue 内置的 property、API 方法冲突",
    "keywords": "vue data 中 _ 开头的变量为 undefined,data 下划线开头的变量,vue _ 开头的变量,vue  Keys starting with '_' are reserved",
    "category": "Vue"
  },
  { 
    "source": "Spring Boot 怎么解决跨域问题: 使用注解, 完整测试 demo 已传 github.md",
    "staticFileName": "spring_boot_allow_cross.html",
    "author": "guoqzuo",
    "createDate": "2021/09/09",
    "description": "根据 Spring 官网 Building a RESTful Web Service (opens new window) 写了一个测试接口，在使用时，需要让该接口支持跨域，理论上只要设置好对应的响应头、处理好 Options 请求预检就可以，但发现貌似没有处理 OPTIONS 请求的注解。需要一些特殊设置处理。后面发现有一个非常简单的方法来允许跨域，就是使用 @CrossOrigin 注解，使用方法如下",
    "keywords": "spring boot 解决跨域, spring boot 允许跨域, spring boot 通过注解允许跨域",
    "category": "后端数据库等"
  },
  { 
    "source": "什么是 mvc, 什么是 mvvm, 怎么理解 mvc 与 mvvm，mvc 和 mvvm 有什么区别？.md",
    "staticFileName": "mvc_vs_mvvm.html",
    "author": "guoqzuo",
    "createDate": "2021/09/09",
    "description": "每个新技术的出现都有其历史原因，MVVM 也是如此。Vue 就是基于 MVVM 模式。那什么是 MVVM 构架模式，和 MVC 模式有什么区别呢？在介绍 MVVM 之前，我们先需要了解什么是 MVC 模式。在 ajax 技术没有出现之前，html 页面中发送 http 请求会刷新整个页面。页面内容强依赖后端接口响应的内容，于是催生了 jsp、php、asp 等前后端都耦合在一起的技术。下面来看一个实例",
    "keywords": "什么是 mvc,什么是 mvvm,怎么理解 mvc, mvc 与 mvvm 的区别,mvc,mvvm",
    "category": "Vue"
  },
  { 
    "source": "nginx emerg bind to 0.0.0.0:80 failed <10013, 80 端口被占用.md",
    "staticFileName": "mginx_80_port.html",
    "author": "guoqzuo",
    "createDate": "2021/09/09",
    "description": "重启服务器后发现开启 nginx 时，报错 nginx emerg bind to 0.0.0.0:80 failed <10013:，这个错误一般是 80 端口被占用的问题，访问 http://127.0.0.1 看看 80 端口的情况，发现是 Java 服务，检查后发现 tomcat 开了，它占用了 80 端口，关掉 tomcat，再次运行就可以了。",
    "keywords": "nginx 80 端口被占用,emerg bind to 0.0.0.0:80 failed",
    "category": "运维部署与版本控制"
  },
  { 
    "source": "js 点击按钮复制内容的实现, 使用 ele.select 加 document.execCommand('copy').md",
    "staticFileName": "js_copy.html",
    "author": "guoqzuo",
    "createDate": "2021/09/09",
    "description": "点击按钮复制链接、复制代码在前端是比较常见的需求，这里介绍一种比较简单的实现：1.先借用 input 等可以选中文本的元素，调用 element.select() 选中文本内容 2.再执行 document.execCommand('copy') 对选中内容进行复制 我们可以通过下面的例子来了解这个过程，点击按钮复制内容 - 在线演示",
    "keywords": "js 点击按钮复制内容实现,js 向粘贴板写入内容,js copy text",
    "category": "JavaScript"
  },
  { 
    "source": "js if(true) 代码块中函数和变量同名时作用域提升问题，Chrome Devtools Snippets 断点调试.md",
    "staticFileName": "js_hoisting.html",
    "author": "guoqzuo",
    "createDate": "2021/09/09",
    "description": "在 JS 代码块中变量和函数同名，作用域怎么提升的问题是比较难以理解的，对于不同的浏览器还有不同的结果，下面来看几个例子，我们可以通过 Chrome 浏览器中的 DevTools - Sources - Snippets 中利用断点调试的功能来看浏览器是如何一步步执行的。",
    "keywords": "js hoisting,js 函数提升,js 变量提升,Chrome Devtools Snippets 断点调试",
    "category": "JavaScript"
  },
  {
    "source": "node 自动化部署、持续集成的核心原理: node 可以执行 shell 脚本 + 可以监听请求.md",
    "staticFileName": "node_ci_cd.html",
    "author": "guoqzuo",
    "createDate": "2021/09/09",
    "description": "node 可以用来支撑实现自动化部署、持续集成，核心原理是：1. node 可以执行 shell 脚本，而部署流程一般都是写在 shell 脚本中的。2. node 可以作为服务器 server, 当接收到请求后，根据条件判断是否执行部署的 shell 脚本。我们这里结合 github webhooks 来实现持续集成，自动化部署",
    "keywords": "node 自动化部署,node持续集成,node ci,node cd,node webhooks,github webhooks",
    "category": "运维部署与版本控制"
  }
]


